"""
Django settings for adminpanel project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys
from pathlib import Path

from django.apps import apps
from django.core.management import call_command
from django.utils.safestring import mark_safe
from dotenv import load_dotenv

load_dotenv("notf.env")

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get("ADMIN_PANEL_SECRET_KEY", default="NOT_SO_SECRET")

DEBUG = os.environ.get("ADMIN_PANEL_DEBUG", default="false").lower() in ("1", "yes", "true")

ALLOWED_HOSTS = os.environ.get("ADMIN_PANEL_ALLOWED_HOSTS").split(",")

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "tasks",
    "django_summernote",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "adminpanel.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "adminpanel.wsgi.application"

SQLITE_SETTING = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

POSTGRES_SETTINGS = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("NOTF_POSTGRES_DB", default="postgres"),
        "HOST": os.environ.get("NOTF_POSTGRES_HOST", default="localhost"),
        "PORT": os.environ.get("NOTF_POSTGRES_PORT", default=5432),
        "USER": os.environ.get("NOTF_POSTGRES_USER", default="postgres"),
        "PASSWORD": os.environ.get("NOTF_POSTGRES_PASSWORD", default="postgres"),
    }
}

if os.environ.get("USE_POSTGRES_IN_ADMIN_PANEL", default="true").lower() in ("1", "yes", "true"):
    DATABASES = POSTGRES_SETTINGS
else:
    DATABASES = SQLITE_SETTING

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_ROOT = "opt/adminpanel/static"
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
X_FRAME_OPTIONS = "SAMEORIGIN"
SUMMERNOTE_THEME = "bs4"
SUMMERNOTE_CONFIG = {
    "width": "100%",
    "height": "480",
    "toolbar": [
        ["style", ["style"]],
        ["style", ["bold", "italic", "underline", "clear"]],
        ["para", ["ul", "ol", "paragraph"]],
        ["insert", ["link", "picture", "video"]],
        ["view", ["fullscreen", "codeview", "help"]],
    ],
    "popover": {
        "image": [
            ["custom", ["imageAttributes", "imageShape"]],
            ["imagesize", ["imageSize100", "imageSize50", "imageSize25"]],
            ["float", ["floatLeft", "floatRight", "floatNone"]],
            ["remove", ["removeMedia"]],
        ],
    },
    "summernote": {
        "tabDisable": "true",
    },
    "codemirror": {
        "mode": "json",
        "lineNumbers": True,
        "tabSize": 2,
        "extraKeys": {
            "Ctrl-Q": "autocomplete",
            "Ctrl-S": lambda e: mark_safe(
                "console.log(JSON.stringify(JSON.parse('" + e.getDoc().getValue() + "'), null, 2));"
            ),
        },
    },
    "lang": "ru-RU",
    "disableGrammar": "false",
    "disableSpelling": "false",
}


apps.populate(INSTALLED_APPS)
FIXTURE_DIRS = (os.path.join(BASE_DIR, "app", "fixtures"),)

# Load fixture data automatically during testing and initialization
if "test" in sys.argv or "runserver" in sys.argv:
    call_command("loaddata", "initial_data.json")
