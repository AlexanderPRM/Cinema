version: '3'
services:
  db:
    image: postgres:13.0-alpine
    env_file:
      - "config.env"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    restart: always

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://${ELASTIC_HOST}:${ELASTIC_PORT}/" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - "discovery.type=single-node"
    volumes:
      - elasticdata:/usr/share/elasticsearch/data
    env_file:
      - config.env

  etl_movies:
    build: etl_movies
    restart: always
    env_file:
      - config.env
    depends_on:
      - db
      - elastic
      # - transfer

  etl_persons:
    build: etl_persons
    restart: always
    env_file:
      - config.env
    depends_on:
      - db
      - elastic
      # - transfer

  etl_genres:
    build: etl_genres
    restart: always
    env_file:
      - config.env
    depends_on:
      - db
      - elastic
      # - transfer

  redis:
    image: redis:7.0.9
    restart: always
    env_file:
      - config.env
    depends_on:
      - etl_movies
  
  api:
    build: .
    ports:
      - 8000:8000
    env_file:
      - config.env
    restart: always


volumes:
  postgres_data:
  elasticdata:
  redisdata: