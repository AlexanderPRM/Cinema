version: '3.5'
services:
  db:
    image: postgres:13.0-alpine
    env_file:
      - "config.env"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - cinema
    restart: always

  auth_db:
    image: postgres:13.0-alpine
    env_file:
      - "config.env"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d ${AUTH_POSTGRES_DB} -U ${AUTH_POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/auth_data/
    networks:
      - cinema
    restart: always

  auth_redis:
    image: redis:7.0.9
    restart: always
    networks:
      - cinema
    env_file:
      - config.env

  auth_api:
    build: auth_api
    env_file:
      - config.env
    networks:
      - cinema
    restart: always

  # elastic:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
  #   restart: always
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://${ELASTIC_HOST}:${ELASTIC_PORT}/" ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   environment:
  #     - "discovery.type=single-node"
  #   volumes:
  #     - elasticdata:/usr/share/elasticsearch/data
  #   env_file:
  #     - config.env

  transfer:
    image: alexanderprm/sqlite_to_postgres:async_api_transfer
    env_file:
      - config.env
    networks:
      - cinema
    depends_on:
      - db

  # etl_movies:
  #   build: films_api/etl/etl_movies
  #   restart: always
  #   env_file:
  #     - config.env
  #   depends_on:
  #     - db
  #     - elastic
  #     - transfer

  # etl_persons:
  #   build: films_api/etl/etl_persons
  #   restart: always
  #   env_file:
  #     - config.env
  #   depends_on:
  #     - db
  #     - elastic
  #     - transfer

  # etl_genres:
  #   build: films_api/etl/etl_genres
  #   restart: always
  #   env_file:
  #     - config.env
  #   depends_on:
  #     - db
  #     - elastic
  #     - transfer

  # redis:
  #   image: redis:7.0.9
  #   restart: always
  #   env_file:
  #     - config.env
  #   depends_on:
  #     - etl_movies
  
  # api:
  #   build: films_api
  #   ports:
  #     - 8000:8000
  #   env_file:
  #     - config.env
  #   restart: always
    
  nginx:
    image: nginx:1.22.1
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - auth_db
      - auth_redis
      - auth_api
    networks:
      - cinema
    ports:
      - 80:80
      
  tracer_jaeger:
    image: jaegertracing/all-in-one:latest
    restart: always
    networks:
      - cinema
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  ugc:
    build: films_user_timestamp/src
    ports:
      - 8001:8000
    env_file:
      - config.env
    restart: always
    networks:
      - cinema
    depends_on:
      - kafka
      - ugc_redis

  ugc_etl:
    build: films_user_timestamp
    env_file:
      - config.env
    restart: always
    networks:
      - cinema
    depends_on:
      - kafka
      - ugc_redis

  zookeeper-kafka:
    image: wurstmeister/zookeeper
    restart: always
    networks:
      - cinema
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    environment:
        KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
        KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
        KAFKA_LISTENERS: INSIDE://:9093,OUTSIDE://:9092
        KAFKA_ADVERTISED_LISTENERS: INSIDE://:9093,OUTSIDE://kafka:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    restart: always
    networks:
      - cinema
    depends_on:
      - zookeeper-kafka

  ugc_redis:
    image: redis:7.0.9
    restart: always
    networks:
      - cinema
    env_file:
      - config.env

  zookeeper_ch:
    image: zookeeper:3.5
    container_name: zookeeper_ch
    networks:
      - cinema
    hostname: zookeeper_ch

  clickhouse-node1:
    image: yandex/clickhouse-server:20.4
    container_name: clickhouse-node1
    hostname: clickhouse-node1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - ./clickhouse_config/node1:/etc/clickhouse-server
    networks:
      - cinema
    depends_on:
      - zookeeper_ch

  clickhouse-node3:
    image: yandex/clickhouse-server:20.4
    container_name: clickhouse-node3
    hostname: clickhouse-node3
    volumes:
      - ./clickhouse_config/node3:/etc/clickhouse-server
    networks:
      - cinema
    depends_on:
      - zookeeper_ch
      
  logstash:
    image: logstash:7.10.1
    environment:
      XPACK_MONITORING_ENABLED: "true"
      ES_HOST: "elasticsearch:9200"
    ports:
      - "5044:5044/udp"
    networks:
      - cinema
    volumes:
      - ./logstash_deploy/logstash.conf:/config/logstash.conf
    command: logstash -f /config/logstash.conf

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
  #   environment:
  #     discovery.type: single-node
  #   ports:
  #     - 9200:9200
  #   volumes:
  #     - /tmp/esdata:/tmp/elasticsearch/data

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.10.2
  #   ports:
  #     - "5601:5601"
  #   depends_on:
  #     - elasticsearch
  


networks:
  cinema:
    external:
      name: cinema
volumes:
  clickhouse_config:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './clickhouse_config'
  postgres_data:
  elasticdata:
